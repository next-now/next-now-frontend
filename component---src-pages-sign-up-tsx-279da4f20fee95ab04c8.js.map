{"version":3,"sources":["webpack:///./src/components/Formik/Element/Element.tsx","webpack:///./src/components/Formik/TextField/TextField.tsx","webpack:///./src/pages/sign-up.tsx"],"names":["Element","props","meta","useField","name","className","aria-describedby","description","htmlFor","classNames","labelHidden","disabled","label","required","aria-hidden","children","id","descriptionHidden","descriptionHighlighted","touched","error","TextField","defaultValue","field","title","placeholder","type","SignupPage","t","useTranslation","initialValues","username","password","email","passwordConfirm","onSubmit","values","actions","setTimeout","setSubmitting","fetch","method","mode","headers","body","JSON","stringify","redirect","referrerPolicy","then","navigate","text"],"mappings":"yKA0FeA,EA3CyB,SAAAC,GAAS,IACtCC,EAAQC,YAASF,EAAMG,MADe,GAG/C,OACE,yBACEC,UAAU,oBACVC,mBAAkBL,EAAMM,aAAkBN,EAAMG,KAA9B,gBAElB,2BACEI,QAASP,EAAMG,KACfC,UAAWI,IAAW,kCAAmC,CACvD,UAAWR,EAAMS,YACjB,gBAAiBT,EAAMU,SACvB,iBAAkBV,EAAMU,YAGzBV,EAAMW,MACNX,EAAMY,SAAW,0BAAMC,cAAY,QAAlB,KAAoC,MAGxD,yBAAKT,UAAU,YAAYJ,EAAMc,UAEhCd,EAAMM,aACL,uBACES,GAAOf,EAAMG,KAAX,eACFC,UAAWI,IAAW,oBAAqB,CACzC,UAAWR,EAAMgB,kBACjB,gBAAiBhB,EAAMU,SACvB,iBAAkBV,EAAMU,SACxB,uBAAwBV,EAAMiB,0BAG/BjB,EAAMM,aAIVL,EAAKiB,SAAWjB,EAAKkB,OACpB,uBAAGf,UAAU,6BAA6BH,EAAKkB,SCjCxCC,IA/B6B,SAAApB,GAAS,MAC7BE,YAAiB,CACrCC,KAAMH,EAAMG,KACZkB,aAAc,KAFTC,EAD4C,KACrCrB,EADqC,KAMnD,OACE,kBAAC,EAAYD,EACX,yCACEuB,MAAOvB,EAAMW,MACbI,GAAIf,EAAMG,KACVO,SAAUV,EAAMU,SAChBc,YAAaxB,EAAMwB,YACnBC,KAAMzB,EAAMyB,KACZb,SAAUZ,EAAMY,UACZU,EAPN,CAQElB,UAAWI,IACT,+DACA,yCACA,CACE,sDACER,EAAMU,SACR,wBAAyBV,EAAMU,SAC/B,8BAA+BT,EAAKkB,OAASlB,EAAKiB,gB,kCC3C9D,mFA4DeQ,UA7Cc,WAAM,IACzBC,EAAMC,cAAND,EAoBR,OACE,gCACE,sBAAIvB,UAAU,QAAQuB,EAAE,aACxB,qBAAGvB,UAAU,QAAQuB,EAAE,6CACvB,gBAAC,IAAD,CAAQE,cAAgB,CACpBC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,gBAAiB,IACfC,SA5BO,SAACC,EAAsBC,GACtCC,YAAW,WAET,OADAD,EAAQE,eAAc,GACfC,MAAM,6CAA8C,CAEzDC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUV,GACrBW,SAAU,SACVC,eAAgB,gBAEfC,MAAK,WACJ,OAAOC,YAAS,UAEnB,QAYE,kBACC,gBAAC,IAAD,KACA,gBAAC,IAAD,CAAW9C,KAAK,WAAWQ,MAAM,aACjC,gBAAC,IAAD,CAAWR,KAAK,QAAQQ,MAAM,UAC9B,gBAAC,IAAD,CAAWR,KAAK,WAAWQ,MAAM,WAAWc,KAAK,aACjD,gBAAC,IAAD,CAAWtB,KAAK,kBAAkBQ,MAAM,mBAAmBc,KAAK,aAChE,gBAAC,IAAD,CAAQyB,KAAK","file":"component---src-pages-sign-up-tsx-279da4f20fee95ab04c8.js","sourcesContent":["import React from 'react';\nimport { useField } from 'formik';\nimport classNames from 'classnames';\n\nexport interface ElementProps {\n  /**\n   * The form elements name.\n   */\n  name: string;\n  /**\n   * The form elements label.\n   */\n  label: string;\n  /**\n   * A in-depth description of the form element.\n   */\n  description?: string;\n  /**\n   * Visually marks the form element as required.\n   *\n   * **Does not validate! Required validation has to be added to the Yup validation schema.**\n   */\n  required?: boolean;\n  /**\n   * Disable the element.\n   */\n  disabled?: boolean;\n  /**\n   * Visually hide the label.\n   */\n  labelHidden?: boolean;\n  /**\n   * Visually hide the description.\n   */\n  descriptionHidden?: boolean;\n  /**\n   * Highlight the description.\n   *\n   * Used for less obvious descriptions that should be read by the user.\n   */\n  descriptionHighlighted?: boolean;\n}\n\n/**\n * Base component for form elements, handling label, description and error\n * display.\n */\nconst Element: React.FC<ElementProps> = props => {\n  const [, meta] = useField(props.name);\n\n  return (\n    <div\n      className=\"mb-4 form-element\"\n      aria-describedby={props.description && `${props.name}-description`}\n    >\n      <label\n        htmlFor={props.name}\n        className={classNames('text-small font-bold block mb-3', {\n          'sr-only': props.labelHidden,\n          'text-gray-300': props.disabled,\n          'text-gray-600': !props.disabled,\n        })}\n      >\n        {props.label}\n        {props.required ? <span aria-hidden=\"true\">*</span> : null}\n      </label>\n\n      <div className=\"relative\">{props.children}</div>\n\n      {props.description && (\n        <p\n          id={`${props.name}-description`}\n          className={classNames('text-xs mt-2 mb-0', {\n            'sr-only': props.descriptionHidden,\n            'text-gray-300': props.disabled,\n            'text-gray-500': !props.disabled,\n            'text-bright-blue-500': props.descriptionHighlighted,\n          })}\n        >\n          {props.description}\n        </p>\n      )}\n\n      {meta.touched && meta.error && (\n        <p className=\"mb-0 text-xs text-red-600\">{meta.error}</p>\n      )}\n    </div>\n  );\n};\n\nexport default Element;\n","import React from 'react';\nimport Element, { ElementProps } from './../Element/Element';\nimport { useField } from 'formik';\nimport classNames from 'classnames';\n\nexport interface TextFieldProps extends ElementProps {\n  /**\n   * Type of input text\n   */\n  type?: string;\n  /**\n   * Placeholder text to be displayed when empty.\n   */\n  placeholder?: string;\n}\n\n/**\n * Text field component. Allows to display icons on the left and and option\n * reset-button on the right.\n */\nconst TextField: React.FC<TextFieldProps> = props => {\n  const [field, meta] = useField<string>({\n    name: props.name,\n    defaultValue: '',\n  });\n\n  return (\n    <Element {...props}>\n      <input\n        title={props.label}\n        id={props.name}\n        disabled={props.disabled}\n        placeholder={props.placeholder}\n        type={props.type}\n        required={props.required}\n        {...field}\n        className={classNames(\n          'border border-gray-300 focus:border-dark-blue-400 rounded-sm',\n          'w-full py-3 px-4 text-xs leading-loose',\n          {\n            'bg-gray-100 cursor-not-allowed placeholder-gray-300':\n              props.disabled,\n            'placeholder-gray-400': !props.disabled,\n            'bg-red-100 border-red-600': !!meta.error && meta.touched,\n          }\n        )}\n      />\n    </Element>\n  );\n};\n\nexport default TextField;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Formik, Form, FormikValues } from 'formik';\nimport Submit from '../components/Submit';\nimport Button from '../components/Button';\nimport TextField from '../components/Formik/TextField/TextField';\nimport { navigate } from 'gatsby';\n\ninterface SignupValues {\n  username: string;\n  email: string;\n  password: string;\n  passwordConfirm: string;\n}\n\nconst SignupPage: React.FC = () => {\n  const { t } = useTranslation();\n  const onSubmit = (values: SignupValues, actions: FormikValues) => {\n    setTimeout(() => {\n      actions.setSubmitting(false);\n      return fetch(`https://backend.next-now.site/api/v0/users`, {\n        // TODO: extract host into an env var\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(values),\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n      })\n        .then(() => {\n          return navigate('/');\n        });\n    }, 1000);\n  };\n  return (\n    <>\n      <h1 className=\"mb-8\">{t('Register')}</h1>\n      <p className=\"mb-4\">{t('Enter your details to create an account.')}</p>\n      <Formik initialValues={ {\n          username: '',\n          password: '',\n          email: '',\n          passwordConfirm: ''\n        } } onSubmit={onSubmit}>\n        {() => (\n          <Form>\n          <TextField name=\"username\" label=\"Username\" />\n          <TextField name=\"email\" label=\"Email\" />\n          <TextField name=\"password\" label=\"Password\" type=\"password\" />\n          <TextField name=\"passwordConfirm\" label=\"Confirm Password\" type=\"password\" />\n          <Submit text=\"Login\" />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default SignupPage;\n"],"sourceRoot":""}
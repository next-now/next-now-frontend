{"version":3,"sources":["webpack:///./src/components/Button/index.tsx","webpack:///./src/components/Formik/Element/Element.tsx","webpack:///./src/components/Formik/TextField/TextField.tsx","webpack:///./src/pages/login.tsx"],"names":["Button","text","path","t","useTranslation","className","type","to","Element","props","meta","useField","name","aria-describedby","description","htmlFor","classNames","labelHidden","disabled","label","required","aria-hidden","children","id","descriptionHidden","descriptionHighlighted","touched","error","TextField","defaultValue","field","title","placeholder","LoginPage","initialValues","username","password","onSubmit","values","actions","setTimeout","setSubmitting","fetch","method","mode","headers","body","JSON","stringify","redirect","referrerPolicy","then","response","json","localStorage","setItem","token","data","navigate"],"mappings":"2FAAA,wCAsBeA,IAZV,SAAC,GAAmB,IAAjBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACJC,EAAMC,cAAND,EACR,OACE,0BACEE,UAAU,yIACVC,KAAK,UAEJJ,EAAO,gBAAC,IAAD,CAAMK,GAAIL,GAAOC,EAAEF,IAAgBE,EAAEF,M,gHCyEpCO,EA3CyB,SAAAC,GAAS,IACtCC,EAAQC,YAASF,EAAMG,MADe,GAG/C,OACE,yBACEP,UAAU,oBACVQ,mBAAkBJ,EAAMK,aAAkBL,EAAMG,KAA9B,gBAElB,2BACEG,QAASN,EAAMG,KACfP,UAAWW,IAAW,kCAAmC,CACvD,UAAWP,EAAMQ,YACjB,gBAAiBR,EAAMS,SACvB,iBAAkBT,EAAMS,YAGzBT,EAAMU,MACNV,EAAMW,SAAW,0BAAMC,cAAY,QAAlB,KAAoC,MAGxD,yBAAKhB,UAAU,YAAYI,EAAMa,UAEhCb,EAAMK,aACL,uBACES,GAAOd,EAAMG,KAAX,eACFP,UAAWW,IAAW,oBAAqB,CACzC,UAAWP,EAAMe,kBACjB,gBAAiBf,EAAMS,SACvB,iBAAkBT,EAAMS,SACxB,uBAAwBT,EAAMgB,0BAG/BhB,EAAMK,aAIVJ,EAAKgB,SAAWhB,EAAKiB,OACpB,uBAAGtB,UAAU,6BAA6BK,EAAKiB,SCjCxCC,IA/B6B,SAAAnB,GAAS,MAC7BE,YAAiB,CACrCC,KAAMH,EAAMG,KACZiB,aAAc,KAFTC,EAD4C,KACrCpB,EADqC,KAMnD,OACE,kBAAC,EAAYD,EACX,yCACEsB,MAAOtB,EAAMU,MACbI,GAAId,EAAMG,KACVM,SAAUT,EAAMS,SAChBc,YAAavB,EAAMuB,YACnB1B,KAAMG,EAAMH,KACZc,SAAUX,EAAMW,UACZU,EAPN,CAQEzB,UAAWW,IACT,+DACA,yCACA,CACE,sDACEP,EAAMS,SACR,wBAAyBT,EAAMS,SAC/B,8BAA+BR,EAAKiB,OAASjB,EAAKgB,gB,kCC3C9D,+FAmEeO,UAtDa,WAAM,IACxB9B,EAAMC,cAAND,EAyBR,OACE,gCACE,sBAAIE,UAAU,QAAQF,EAAE,UACxB,qBAAGE,UAAU,QACVF,EACC,0FAGJ,gBAAC,IAAD,CACE+B,cAAe,CACbC,SAAU,GACVC,SAAU,IAEZC,SApCW,SAACC,EAAqBC,GACrCC,YAAW,WAET,OADAD,EAAQE,eAAc,GACfC,MAAM,kDAAmD,CAE9DC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUV,GACrBW,SAAU,SACVC,eAAgB,gBAEfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAL,GAGJ,OAFAQ,aAAaC,QAAQ,QAAST,EAAKU,MAAMA,OACzCF,aAAaC,QAAQ,OAAQR,KAAKC,UAAUF,EAAKW,OAC1CC,YAAS,gBAEnB,QAkBE,kBACC,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAW9C,KAAK,WAAWO,MAAM,aACjC,gBAAC,IAAD,CAAWP,KAAK,WAAWO,MAAM,WAAWb,KAAK,aACjD,gBAAC,IAAD,CAAQL,KAAK,qBACb,gBAAC,IAAD,CAAQA,KAAK","file":"component---src-pages-login-tsx-417cb0e0e4c2357b38fd.js","sourcesContent":["import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'gatsby';\n\n/**\n * A simple button component.\n */\nconst Button: React.FC<{\n  text: string;\n  path?: string;\n}> = ({ text, path }) => {\n  const { t } = useTranslation();\n  return (\n    <button\n      className=\"flex items-center px-3 py-2 m-3 border rounded text-teal-200 border-teal-400 hover:bg-nextnow-dark hover:text-white hover:border-white\"\n      type=\"button\"\n    >\n      {path ? <Link to={path}>{t(text)}</Link> : t(text)}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport { useField } from 'formik';\nimport classNames from 'classnames';\n\nexport interface ElementProps {\n  /**\n   * The form elements name.\n   */\n  name: string;\n  /**\n   * The form elements label.\n   */\n  label: string;\n  /**\n   * A in-depth description of the form element.\n   */\n  description?: string;\n  /**\n   * Visually marks the form element as required.\n   *\n   * **Does not validate! Required validation has to be added to the Yup validation schema.**\n   */\n  required?: boolean;\n  /**\n   * Disable the element.\n   */\n  disabled?: boolean;\n  /**\n   * Visually hide the label.\n   */\n  labelHidden?: boolean;\n  /**\n   * Visually hide the description.\n   */\n  descriptionHidden?: boolean;\n  /**\n   * Highlight the description.\n   *\n   * Used for less obvious descriptions that should be read by the user.\n   */\n  descriptionHighlighted?: boolean;\n}\n\n/**\n * Base component for form elements, handling label, description and error\n * display.\n */\nconst Element: React.FC<ElementProps> = props => {\n  const [, meta] = useField(props.name);\n\n  return (\n    <div\n      className=\"mb-4 form-element\"\n      aria-describedby={props.description && `${props.name}-description`}\n    >\n      <label\n        htmlFor={props.name}\n        className={classNames('text-small font-bold block mb-3', {\n          'sr-only': props.labelHidden,\n          'text-gray-300': props.disabled,\n          'text-gray-600': !props.disabled,\n        })}\n      >\n        {props.label}\n        {props.required ? <span aria-hidden=\"true\">*</span> : null}\n      </label>\n\n      <div className=\"relative\">{props.children}</div>\n\n      {props.description && (\n        <p\n          id={`${props.name}-description`}\n          className={classNames('text-xs mt-2 mb-0', {\n            'sr-only': props.descriptionHidden,\n            'text-gray-300': props.disabled,\n            'text-gray-500': !props.disabled,\n            'text-bright-blue-500': props.descriptionHighlighted,\n          })}\n        >\n          {props.description}\n        </p>\n      )}\n\n      {meta.touched && meta.error && (\n        <p className=\"mb-0 text-xs text-red-600\">{meta.error}</p>\n      )}\n    </div>\n  );\n};\n\nexport default Element;\n","import React from 'react';\nimport Element, { ElementProps } from './../Element/Element';\nimport { useField } from 'formik';\nimport classNames from 'classnames';\n\nexport interface TextFieldProps extends ElementProps {\n  /**\n   * Type of input text\n   */\n  type?: string;\n  /**\n   * Placeholder text to be displayed when empty.\n   */\n  placeholder?: string;\n}\n\n/**\n * Text field component. Allows to display icons on the left and and option\n * reset-button on the right.\n */\nconst TextField: React.FC<TextFieldProps> = props => {\n  const [field, meta] = useField<string>({\n    name: props.name,\n    defaultValue: '',\n  });\n\n  return (\n    <Element {...props}>\n      <input\n        title={props.label}\n        id={props.name}\n        disabled={props.disabled}\n        placeholder={props.placeholder}\n        type={props.type}\n        required={props.required}\n        {...field}\n        className={classNames(\n          'border border-gray-300 focus:border-dark-blue-400 rounded-sm',\n          'w-full py-3 px-4 text-xs leading-loose',\n          {\n            'bg-gray-100 cursor-not-allowed placeholder-gray-300':\n              props.disabled,\n            'placeholder-gray-400': !props.disabled,\n            'bg-red-100 border-red-600': !!meta.error && meta.touched,\n          }\n        )}\n      />\n    </Element>\n  );\n};\n\nexport default TextField;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Formik, Form, FormikValues } from 'formik';\nimport Button from '../components/Button';\nimport Submit from '../components/Submit';\nimport TextField from '../components/Formik/TextField/TextField';\nimport { navigate } from 'gatsby';\n\ninterface LoginValues {\n  username: string;\n  password: string;\n}\n\nconst LoginPage: React.FC = () => {\n  const { t } = useTranslation();\n\n  const onSubmit = (values: LoginValues, actions: FormikValues) => {\n    setTimeout(() => {\n      actions.setSubmitting(false);\n      return fetch(`https://backend.next-now.site/api/v0/auth/login`, {\n        // TODO: extract host into an env var\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(values),\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n      })\n        .then(response => response.json())\n        .then(body => {\n          localStorage.setItem('token', body.token.token);\n          localStorage.setItem('user', JSON.stringify(body.data));\n          return navigate('/wallet');\n        });\n    }, 1000);\n  };\n\n  return (\n    <>\n      <h1 className=\"mb-8\">{t('Login')}</h1>\n      <p className=\"mb-4\">\n        {t(\n          'Enter your username and password to gain access to the dashboard and your token data.'\n        )}\n      </p>\n      <Formik\n        initialValues={{\n          username: '',\n          password: '',\n        }}\n        onSubmit={onSubmit}\n      >\n        {() => (\n          <Form>\n            <TextField name=\"username\" label=\"Username\" />\n            <TextField name=\"password\" label=\"Password\" type=\"password\" />\n            <Button text=\"Forgot password?\" />\n            <Submit text=\"Login\" />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default LoginPage;\n"],"sourceRoot":""}
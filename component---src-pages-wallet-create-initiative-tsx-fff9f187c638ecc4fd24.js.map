{"version":3,"sources":["webpack:///./src/components/Formik/Element/Element.tsx","webpack:///./src/components/Formik/TextField/TextField.tsx","webpack:///./src/components/Submit/index.tsx","webpack:///./src/components/DropDown/index.tsx","webpack:///./src/pages/wallet/createInitiative.tsx"],"names":["Element","props","meta","useField","name","className","aria-describedby","description","htmlFor","classNames","labelHidden","disabled","label","required","aria-hidden","children","id","descriptionHidden","descriptionHighlighted","touched","error","TextField","defaultValue","field","title","placeholder","type","Submit","text","DropDown","items","onSelect","length","role","aria-labelledby","onChange","event","target","value","map","item","key","CreateInitiativePage","t","useTranslation","useState","category","initiative","setInitiative","initialValues","onSubmit","values","actions","setTimeout","fetch","method","mode","headers","body","JSON","stringify","redirect","referrerPolicy","then","response","json","navigate","setSubmitting"],"mappings":"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","file":"component---src-pages-wallet-create-initiative-tsx-fff9f187c638ecc4fd24.js","sourcesContent":["import React from 'react';\nimport { useField } from 'formik';\nimport classNames from 'classnames';\n\nexport interface ElementProps {\n  /**\n   * The form elements name.\n   */\n  name: string;\n  /**\n   * The form elements label.\n   */\n  label: string;\n  /**\n   * A in-depth description of the form element.\n   */\n  description?: string;\n  /**\n   * Visually marks the form element as required.\n   *\n   * **Does not validate! Required validation has to be added to the Yup validation schema.**\n   */\n  required?: boolean;\n  /**\n   * Disable the element.\n   */\n  disabled?: boolean;\n  /**\n   * Visually hide the label.\n   */\n  labelHidden?: boolean;\n  /**\n   * Visually hide the description.\n   */\n  descriptionHidden?: boolean;\n  /**\n   * Highlight the description.\n   *\n   * Used for less obvious descriptions that should be read by the user.\n   */\n  descriptionHighlighted?: boolean;\n}\n\n/**\n * Base component for form elements, handling label, description and error\n * display.\n */\nconst Element: React.FC<ElementProps> = props => {\n  const [, meta] = useField(props.name);\n\n  return (\n    <div\n      className=\"mb-4 form-element\"\n      aria-describedby={props.description && `${props.name}-description`}\n    >\n      <label\n        htmlFor={props.name}\n        className={classNames('text-small font-bold block mb-3', {\n          'sr-only': props.labelHidden,\n          'text-gray-300': props.disabled,\n          'text-gray-600': !props.disabled,\n        })}\n      >\n        {props.label}\n        {props.required ? <span aria-hidden=\"true\">*</span> : null}\n      </label>\n\n      <div className=\"relative\">{props.children}</div>\n\n      {props.description && (\n        <p\n          id={`${props.name}-description`}\n          className={classNames('text-xs mt-2 mb-0', {\n            'sr-only': props.descriptionHidden,\n            'text-gray-300': props.disabled,\n            'text-gray-500': !props.disabled,\n            'text-bright-blue-500': props.descriptionHighlighted,\n          })}\n        >\n          {props.description}\n        </p>\n      )}\n\n      {meta.touched && meta.error && (\n        <p className=\"mb-0 text-xs text-red-600\">{meta.error}</p>\n      )}\n    </div>\n  );\n};\n\nexport default Element;\n","import React from 'react';\nimport Element, { ElementProps } from './../Element/Element';\nimport { useField } from 'formik';\nimport classNames from 'classnames';\n\nexport interface TextFieldProps extends ElementProps {\n  /**\n   * Type of input text\n   */\n  type?: string;\n  /**\n   * Placeholder text to be displayed when empty.\n   */\n  placeholder?: string;\n}\n\n/**\n * Text field component. Allows to display icons on the left and and option\n * reset-button on the right.\n */\nconst TextField: React.FC<TextFieldProps> = props => {\n  const [field, meta] = useField<string>({\n    name: props.name,\n    defaultValue: '',\n  });\n\n  return (\n    <Element {...props}>\n      <input\n        title={props.label}\n        id={props.name}\n        disabled={props.disabled}\n        placeholder={props.placeholder}\n        type={props.type}\n        required={props.required}\n        {...field}\n        className={classNames(\n          'border border-gray-300 focus:border-dark-blue-400 rounded-sm',\n          'w-full py-3 px-4 text-xs leading-loose',\n          {\n            'bg-gray-100 cursor-not-allowed placeholder-gray-300':\n              props.disabled,\n            'placeholder-gray-400': !props.disabled,\n            'bg-red-100 border-red-600': !!meta.error && meta.touched,\n          }\n        )}\n      />\n    </Element>\n  );\n};\n\nexport default TextField;\n","import * as React from 'react';\n\n/**\n * A simple submit component.\n */\nconst Submit: React.FC<{\n  text: string;\n}> = ({ text }) => {\n  return (\n    <button\n      className=\"flex items-center px-3 py-2 m-3 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white bg-nextnow-dark\"\n      type=\"submit\"\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default Submit;\n","import * as React from 'react';\nimport navigate from '../../utils/navigate';\n\n/**\n * A simple drop down list.\n */\nconst DropDown: React.FC<{\n  /**\n   * List items consisting of names.\n   */\n  items: {\n    name: string;\n  }[];\n  onSelect: (name: string) => void;\n}> = ({ items, onSelect }) =>\n  items.length ? (\n    <nav\n      role=\"navigation\"\n      aria-labelledby=\"navigation\"\n      className=\"page-centered bg-nextnow-dark text-white py-2 sm:py-0\"\n    >\n      <h2 id=\"navigation\" className=\"sr-only\">\n        Main navigation\n      </h2>\n      <select\n        className=\"sm:hidden block appearance-none w-full bg-nextnow-dark border-2 border-nextnow-yellow px-3 py-2\"\n        onChange={event => onSelect(event.target.value)}\n      >\n        {items.map(item => (\n          <option key={item.name} value={item.name}>\n            {item.name}\n          </option>\n        ))}\n      </select>\n    </nav>\n  ) : null;\n\nexport default DropDown;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Formik, Form } from 'formik';\nimport Submit from '../../components/Submit';\nimport DropDown from '../../components/DropDown';\nimport TextField from '../../components/Formik/TextField/TextField';\nimport { navigate } from 'gatsby';\nimport { useState } from 'react';\n\ninterface Initiative {\n  category: string;\n  description: string;\n}\n\nconst CreateInitiativePage: React.FC = () => {\n  const { t } = useTranslation();\n\n  const [initiative, setInitiative] = useState({\n    category: '',\n    description: '',\n  });\n\n  const onSubmit = (values: Initiative, actions: any) => {\n    setInitiative(values);\n    setTimeout(() => {\n      fetch(`http://localhost:3000/api/v0/initiatives`, {\n        // TODO: extract host into an env var\n        method: 'POST',\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(values),\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n      })\n        .then(response => response.json())\n        .then(body => {\n          navigate('/wallet');\n        });\n      actions.setSubmitting(false);\n    }, 1000);\n  };\n\n  return (\n    <>\n      <h1 className=\"mb-8\">{t('Create an initiative')}</h1>\n      <p className=\"mb-4\">\n        {t('Choose a category and a description for your initiative.')}\n      </p>\n      <label className=\"text-small font-bold block mb-1 text-gray-600\">\n        {t('Initiatives')}\n      </label>\n      <DropDown // Hard-coded for now\n        items={[\n          { name: t('Education') },\n          { name: t('Elderly care') },\n          { name: t('Covid') },\n        ]}\n        onSelect={name => {\n          initiative.category = name;\n        }}\n      />\n      <Formik initialValues={initiative} onSubmit={onSubmit}>\n        {() => (\n          <Form>\n            <TextField name=\"description\" label=\"Description\" />\n            <Submit text=\"Create initiative\" />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default CreateInitiativePage;\n"],"sourceRoot":""}